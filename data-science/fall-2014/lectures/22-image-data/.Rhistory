url <- "http://www.naturalearthdata.com/download/50m/cultural/50m-admin-0-countries.zip"
dest <- paste(tmp,"/tmp.zip",sep="")
download.file(url,dest)  #File is 1.3Mb
url <- "https://www.naturalearthdata.com/download/50m/cultural/50m-admin-0-countries.zip"
dest <- paste(tmp,"/tmp.zip",sep="")
download.file(url,dest)  #File is 1.3Mb
rv_path
url <- "http://www.naturalearthdata.com/download/50m/cultural/ne_50m-admin-0-countries.zip"
dest <- paste(tmp,"/tmp.zip",sep="")
download.file(url,dest)  #File is 1.3Mb
url <- "http://www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip"
dest <- paste(tmp,"/tmp.zip",sep="")
download.file(url,dest)  #File is 1.3Mb
dd <- download.file(url)  #File is 1.3Mb
download.file(url,dest)  #File is 1.3Mb
url <- "http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip"
dest <- paste(tmp,"/tmp.zip",sep="")
download.file(url,dest)  #File is 1.3Mb
unzip(dest)
wld <- readShapePoly("ne_50m_admin_0_countries")
wa <- wld[c(21,22,43,44,81,82,84,144,151,158,160,190,195,213),]
wa@data$id <- rownames(wa@data) # Explicitly identifies attribute rows by the .dbf offset
wa.df <- as.data.frame(wa)
gpclibPermit() # required for fortify method if rgeos is unavailable
wa.fort <- fortify(wa, region="id")
wa.gg <- join(wa.fort, wa.df,by="id")
p <- ggplot(wa.gg)+
geom_polygon(aes(long,lat,group=group))+
geom_path(colour="white",aes(long,lat,group=group),size=1.2)+
coord_equal()+
scale_x_continuous(name=expression(paste("Longitude (",degree,")")),limits=c(-18,4),expand=c(0,0))+
scale_y_continuous(name=expression(paste("Latitude (",degree,")")),limits=c(4,17),expand=c(0,0))
print(p)
unlink(tmp,recursive=T)
setwd(oldwd)
str(wld)
class(wld)
head(wld)
wld[1]
wa <- wld[c(21,22,43,44,81,82,84,144,151,158,160,190),]
wa@data$id <- rownames(wa@data) # Explicitly identifies attribute rows by the .dbf offset
wa.df <- as.data.frame(wa)
gpclibPermit() # required for fortify method if rgeos is unavailable
wa.fort <- fortify(wa, region="id")
wa.gg <- join(wa.fort, wa.df,by="id")
#	Create the plot
p <- ggplot(wa.gg)+
geom_polygon(aes(long,lat,group=group))+
geom_path(colour="white",aes(long,lat,group=group),size=1.2)+
coord_equal()+
scale_x_continuous(name=expression(paste("Longitude (",degree,")")),limits=c(-18,4),expand=c(0,0))+
scale_y_continuous(name=expression(paste("Latitude (",degree,")")),limits=c(4,17),expand=c(0,0))
print(p)
wa <- wld[c(21,22,43,44,81,82,84,144,151,158,160,190,195,213),]
wa@data$id <- rownames(wa@data) # Explicitly identifies attribute rows by the .dbf offset
wa.df <- as.data.frame(wa)
gpclibPermit() # required for fortify method if rgeos is unavailable
wa.fort <- fortify(wa, region="id")
wa.gg <- join(wa.fort, wa.df,by="id")
#	Create the plot
p <- ggplot(wa.gg)+
geom_polygon(aes(long,lat,group=group))+
geom_path(colour="white",aes(long,lat,group=group),size=1.2)+
coord_equal()+
scale_x_continuous(name=expression(paste("Longitude (",degree,")")),limits=c(-18,4),expand=c(0,0))+
scale_y_continuous(name=expression(paste("Latitude (",degree,")")),limits=c(4,17),expand=c(0,0))
print(p)
wa <- wld[c(21,22,43,44,81,82,84,144,151,158,160,190,195,213),]
wld <- readShapePoly("ne_50m_admin_0_countries")
oldwd <- getwd()
tmp <- tempdir()
setwd(tmp)
tmp <- tempdir()
tmp
http://www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip
oldwd <- getwd()
oldwd
tmp <- tempdir()
setwd(tmp)
tmp
setwd(tmp)
oldwd <- getwd()
tmp <- tempdir()
setwd(tmp)
setwd(tmp)
tmp
library(ggvis)
mtcars %>% ggvis(x = ~wt) %>%
layer_densities(
adjust = input_slider(.1, 2, value = 1, step = .1, label = "Bandwidth adjustment"),
kernel = input_select(
c("Gaussian" = "gaussian",
"Epanechnikov" = "epanechnikov",
"Rectangular" = "rectangular",
"Triangular" = "triangular",
"Biweight" = "biweight",
"Cosine" = "cosine",
"Optcosine" = "optcosine"),
label = "Kernel")
)
mtcars %>% ggvis(x= ~wt) %>%
layer_densities(
fill= input_select(c("Purple","Orange")))
mtcars %>% ggvis(x= ~wt) %>%
layer_densities(
fill= input_select(c("Purple","Orange"), label="Fill color"))
mtcars %>% ggvis(x= ~wt) %>%
layer_densities(
fill := input_select(c("Purple","Orange"), label="Fill color"))
mtcars %>% ggvis(x= ~wt) %>%
layer_densities(
color := input_select(c("Purple","Orange"), label="Fill color"),
fill := input_select(c("Purple","Orange"), label="Fill color"))
mtcars %>% ggvis(x= ~wt) %>%
layer_densities(
stroke := input_select(c("Purple","Orange"), label="Fill color"),
fill := input_select(c("Purple","Orange"), label="Fill color"))
mtcars %>% ggvis(x= ~wt) %>%
layer_densities(
stroke := input_radiobuttons(c("Purple","Orange"), label="Line color"),
fill := input_select(c("Purple","Orange"), label="Fill color"))
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
crimeDat <- readRDS("~/data/usaCrimeDat.rds") %>%
filter(state != 'district of columbia')
crimeList <- unique(crimeDat$Crime)
crimeList
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
install.packages("shiny")
install.packages("shiny")
install.packages(c("highr", "httpuv", "jsonlite", "R6", "rjson", "RSQLite", "sqldf", "timeDate", "timeSeries", "tis", "vcdExtra", "VGAMdata"))
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
shiny::runApp('Box Sync/help/Shiny/crime-usa')
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
f1(1)
f = system.file("images", "lena.png", package="EBImage")
lena = readImage(f)
library(EBImage)
lena = readImage(f)
grid.raster(lena)
library(grid)
grid.raster(lena)
lena2 <- lena * 3
plot(lena2)
print(lena2)
lenacomb = combine(lena, t(lena), lena[299:376, 224:301])
lenacomb = combine(lena, t(lena), flip(lena), rotate(lena, 30))
grid.raster(lenacomb)
lenacomb
? filter2
fp <- readImage("finger-print.jpg")
setwd("~/Box Sync/help/imageProcess")
fp <- readImage("finger-print.jpg")
setwd("~/Box Sync/Teaching/stat4410-8416-Data-Science/lectures/22-image-data")
fp <- readImage("finger-print.jpg")
grid.raster(filter2(fp,fhi))
fhi = matrix(1, nc=3, nr=3)
fhi[2,2] = -8
grid.raster(filter2(fp,fhi))
clReverse <- 1-cl
bulletHole <- readPNG("bullet-hole.png")
setwd("~/Box Sync/Teaching/stat4410-8416-Data-Science/lectures/22-image-data")
bulletHole <- readPNG("bullet-hole.png")
library(png)
bulletHole <- readPNG("bullet-hole.png")
bulletHole <- as.raster(bulletHole)
grid.raster(bulletHole)
holes <- bulletHole[270:470, 250:890]
grid.raster(holes)
indx <- as.matrix(holes) > "#857C7DFF"
dm <- dim(holes)
cl <- matrix(1,ncol=dm[2], nrow=dm[1])
cl[indx] <- 0
x <- dm[1]:1
y <- 1:dm[2]
dat <- data.frame(expand.grid(x,y), z = as.vector(cl))
names(dat) <- c("x","y","z")
ggplot(dat, aes(y, x, z = z)) + stat_contour()
library(ggplot2)
ggplot(dat, aes(y, x, z = z)) + stat_contour()
ggplot(dat, aes(y, x, color = z)) + geom_point()
holes <- bulletHole[270:470, 250:890]
grid.raster(holes)
grid.raster(holes[280:290,700:800])
holes <- bulletHole[270:470, 250:890]
grid.raster(holes[180:190,540:580])
grid.raster(holes[180:190,540:580])
grid.raster(holes[100:190,540:580])
grid.raster(holes[100:190,540:640])
grid.raster(holes[50:60,540:640])
grid.raster(holes[50:90,340:640])
grid.raster(holes[50:190,340:640])
grid.raster(holes[10:190,340:640])
grid.raster(holes[10:30,340:640])
grid.raster(holes[10:30,440:640])
grid.raster(holes[10:30,500:540])
grid.raster(holes[10:30,520:550])
grid.raster(holes[10:30,530:550])
grid.raster(holes[10:30,535:550])
grid.raster(holes[10:30,530:550])
grid.raster(holes[10:30,533:550])
grid.raster(holes[20:30,533:550])
grid.raster(holes[25:30,533:550])
grid.raster(holes[24:30,533:550])
grid.raster(holes[23:30,533:550])
grid.raster(holes[23:30,533:540])
grid.raster(holes)
holes[23:30,533:540]
grid.raster(holes[23:30,533:540])
indx <- as.matrix(holes) > "#6A5658FF" # "#857C7DFF"
bholes <- holes
bholes[indx] <- "transparent"
grid.raster(bholes)
grid.raster(bholes)
indx <- as.matrix(holes) > "#816E70FF" # "#857C7DFF"
bholes <- holes
bholes[indx] <- "transparent"
grid.raster(bholes)
indx <- as.matrix(holes) > "#887979FF" # "#857C7DFF"
bholes <- holes
bholes[indx] <- "transparent"
grid.raster(bholes)
indx <- as.matrix(holes) > "#6A5658FF" # "#857C7DFF"
bholes <- holes
bholes[indx] <- "transparent"
grid.raster(bholes)
indx <- as.matrix(holes) > "#6A5658FF" # "#857C7DFF"
bholes <- holes
bholes[indx] <- "transparent"
grid.raster(bholes)
indx <- as.matrix(holes) > "#6D5B5CFF" # "#857C7DFF"
bholes <- holes
bholes[indx] <- "transparent"
grid.raster(bholes)
indx <- as.matrix(holes) > "#6D5B5CFF" # "#857C7DFF"
bholes <- holes
bholes[indx] <- "transparent"
grid.raster(bholes)
bHoles <- matrix(0, ncol=dm[1], nrow=dm[2])
bHoles[holes <  "#6D5B5CFF" ] <- 1
bHoles[as.matrix(holes) <  "#6D5B5CFF" ] <- 1
bHoles <- as.raster(bHoles)
grid.raster(bHoles)
dm <- dim(holes)
bHoles <- matrix(0, ncol=dm[1], nrow=dm[2])
bHoles[as.matrix(holes) <  "#6D5B5CFF" ] <- 1
bHoles <- as.raster(bHoles)
grid.raster(bHoles)
dm
dim(bHoles)
dm <- dim(holes)
bHoles <- matrix(0, ncol=dm[2], nrow=dm[1])
bHoles[as.matrix(holes) <  "#6D5B5CFF" ] <- 1
bHoles <- as.raster(bHoles)
grid.raster(bHoles)
ggplot(dat, aes(y, x, color = z)) + geom_point()
bwlabel(bHoles)
max(bwlabel(bHoles))
nuct = bHoles>0.2
nuct = bHoles[,] > 0.2
nuct = as.matrix(bHoles) > 0.2
nuclabel = bwlabel(nuct)
cat(✬Number of nuclei=✬, max(nuclabel),✬\n✬)
cat("Number of nuclei=', max(nuclabel))
""
''
'
"
cat("Number of nuclei=", max(nuclabel))
nuct
class(lena)
class(bHoles)
as.Image(bHoles)
class(bHoles)
nuct = as.Image(bHoles)
class(nuct)
nuclabel = bwlabel(nuct)
cat("Number of nuclei=", max(nuclabel))
grid.raster(holes)
nuct = as.Image(holes)
nuclabel = bwlabel(nuct)
cat("Number of nuclei=", max(nuclabel))
nuct
nuct = 1- as.Image(holes)
nuclabel = bwlabel(nuct)
cat("Number of nuclei=", max(nuclabel))
nuct
grid.raster(nuct)
nuct = as.Image(holes)
grid.raster(nuct)
grid.raster(holes)
is.Image(holes)
grayimage<-channel(bHoles,"gray")
grid.raster(grayimage)
grayimage<-channel(holes,"gray")
grid.raster(grayimage)
max(bwlabel(grayimage))
fhi
dim(lena)
? filter2
?system.file
ff <- system.file(holes)
ff
ff <- system.file("holes")
ff
holes
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
dat <- read.csv("~/Box Sync/help/data-sets/CrimeStatebyState.csv")
ggplot(dat, aes(Year,Count, group=State))+geom_line()+
facet_wrap(~Crime, scales="free_y", ncol=2)
View(dat)
library(XML)
url <- "http://en.wikipedia.org/wiki/List_of_languages_by_number_of_native_speakers"
tables <- readHTMLTable(url)
head(tables)
datraw <- tables[[1]]
datRaw <- tables[[1]]
head(datRaw)
dat <- datraw[,2:4]
names(dat) <- c("language","nativeSpeaker", "percentPopulation")
head(dat)
dat <- datraw[,2:3]
names(dat) <- c("language","nativeSpeaker")
head(dat)
speaker <- as.numeric(gsub("\\*","",as.character(dat$native_speaker)))
# cleaning non-english character
lang <- substr(with(dat,gsub("\\W","",language)),1,20)
# One of the language name is too big, we truncate upto 20 charater
lan <- with(dat, substr(lang,1,20))
cleanDat <- data.frame(language=lan,nativeSpeaker=speaker)
dat <- datRaw[,2:3]
names(dat) <- c("language","nativeSpeaker")
head(dat)
speaker <- as.numeric(gsub("\\*","",as.character(dat$nativeSpeaker)))
speaker
head(dat)
lang <- substr(with(dat,gsub("\\W","",language)),1,20)
lan <- with(dat, substr(lang,1,20))
cleanDat <- data.frame(language=lan,nativeSpeaker=speaker)
head(cleanDat)
tail(cleanDat)
plotDat <- cleanDat[order(cleanDat$nativeSpeaker, decreasing=T)[1:20], ]
library(ggplot2)
plotDat <- cleanDat[order(cleanDat$nativeSpeaker, decreasing=T)[1:20], ]
ggplot(plotDat, aes(reorder(language, nativeSpeaker), nativeSpeaker))+
geom_bar(stat="identity") + coord_flip() + theme_bw(10)+
ylab("Milion people") +xlab("Language")
speaker <- as.numeric(gsub("\\[\\d\\]","",as.character(dat$nativeSpeaker)))
speaker
speaker <- as.numeric(gsub("\\*","",as.character(dat$nativeSpeaker)))
speaker
dat$nativeSpeaker
speaker <- as.numeric(gsub("(\\*)|(\\[\\d\\]) ","",as.character(dat$nativeSpeaker)))
speaker
speaker <- as.numeric(gsub("(\\*)|(\\[.\\]) ","",as.character(dat$nativeSpeaker)))
speaker <- as.numeric(gsub("(\\[.\\])|(\\*)","",as.character(dat$nativeSpeaker)))
speaker
library(RMySQL)
con = dbConnect(MySQL(),user="training", password="training123",
dbname="trainingDB", host="localhost")
sql <- "select pclass, sex, survived, average(age) as mAge
from titanic group by pclass, sex, survived"
dbGetQuery(con, sql)
sql <- "select pclass, sex, survived, avg(age) as mAge
from titanic group by pclass, sex, survived"
dbGetQuery(con, sql)
avgAge <- dbGetQuery(con, sql)
avgAge
ggplot(avgAge, aes(pclass, mAge, color=sex, group=survived)) + facet_wrap(~sex)
ggplot(avgAge, aes(pclass, mAge, color=sex, group=survived)) +
geom_point() + geom_line() + facet_wrap(~sex)
ggplot(avgAge, aes(pclass, mAge, color=survived, group=survived)) +
geom_point() + geom_line() + facet_wrap(~sex)
library(dplyr)
conDplyr = src_mysql(dbname = "trainingDB", user = "training",
password = "training123", host = "localhost")
myData <- conDplyr %>%
tbl("titanic") %>%
select(pclass, sex, survived, age) %>%
group_by(pclass, sex, survived) %>%
summarise(mAge = mean(age)) %>%
collect()
myData
myData$query
myData <- conDplyr %>%
tbl("titanic") %>%
select(pclass, sex, survived, age) %>%
group_by(pclass, sex, survived) %>%
summarise(mAge = mean(age))
myData$query
myData %>% collect()
dbGetQuery(con, "describe titanic;")
yongest <- conDplyr %>%
tbl("titanic") %>%
select(name, age, pclass) %>%
arrange(age) %>%
collect(10)
@
yongest
yongest <- conDplyr %>%
tbl("titanic") %>%
filter(age != NA)
select(name, age, pclass) %>%
arrange(age) %>%
collect(10)
yongest <- conDplyr %>%
tbl("titanic") %>%
filter(age != NA) %>%
select(name, age, pclass) %>%
arrange(age) %>%
collect(5)
yongest
yongest <- conDplyr %>%
tbl("titanic") %>%
select(name, age, pclass) %>%
arrange(age) %>%
filter(age != NA) %>%
collect(5)
yongest
yongest <- conDplyr %>%
tbl("titanic") %>%
select(name, age, pclass) %>%
arrange(age) %>%
collect(5)
yongest
?collect
yongest <- conDplyr %>%
tbl("titanic") %>%
select(name, age, pclass) %>%
arrange(age) %>%
filter(age != NA) %>%
collect()
yongest <- conDplyr %>%
tbl("titanic") %>%
select(name, age, pclass) %>%
arrange(age)
collect()
yongest <- conDplyr %>%
tbl("titanic") %>%
select(name, age, pclass) %>%
arrange(age) %>%
collect()
head(yongest)
tail(yongest)
diedByAge <- conDplyr %>%
tbl("titanic") %>%
filter(survived==0) %>%
select(name, age, pclass) %>%
arrange(age) %>%
filter(age != "NA") %>%
collect()
head(dieadByAge)
head(diedByAge)
