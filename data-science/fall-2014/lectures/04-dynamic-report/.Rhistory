mtcars %>% ggvis(~wt, ~mpg) %>% layer_points()
dat %>% ggvis(~language, ~native_speaker) %>% layer_points()
dat %>% ggvis(~language, ~native_speaker) %>% layer_bars()
summary(dat)
dat$native_speaker <- as.numeric(gsub("\\*","",as.character(dat$native_speaker)))
head(dat)
summary(dat)
dat %>% ggvis(~language, ~native_speaker) %>% layer_bars()
dat %>% ggvis(~language, ~native_speaker) %>% layer_bars()
dat <- dat[order(dat$native_speaker),]
head(dat)
dat$native_speaker <- as.numeric(gsub("\\*","",as.character(dat$native_speaker)))
dat <- dat[order(dat$native_speaker),]
head(dat)
dat %>% ggvis(~language, ~native_speaker) %>% layer_bars()
dat[1:10,] %>% ggvis(~language, ~native_speaker) %>% layer_bars()
dd =as.character(dat)
dat$native_speaker <- as.numeric(gsub("\\*","",as.character(dat$native_speaker)))
dat$language <- as.character(dat$language)
dat <- dat[order(dat$native_speaker),]
head(dat)
dat[1:10,] %>% ggvis(~language, ~native_speaker) %>% layer_bars()
? order
dat$native_speaker <- as.numeric(gsub("\\*","",as.character(dat$native_speaker)))
dat$language <- as.character(dat$language)
dat <- dat[order(dat$native_speaker, decreasing = T),]
head(dat)
dat[1:10,] %>% ggvis(~language, ~native_speaker) %>% layer_bars()
dat <- dat[order(dat$native_speaker, decreasing = T)[1:5],]
head(dat)
dat %>% ggvis(~language, ~native_speaker) %>% layer_bars()
dat$native_speaker <- as.numeric(gsub("\\*","",as.character(dat$native_speaker)))
dat$language <- as.character(dat$language)
datplot <- dat[order(dat$native_speaker, decreasing = T)[1:15],]
head(dat)
datplot %>% ggvis(~language, ~native_speaker) %>% layer_bars()
dat <- datraw[,2:3]
names(dat) <- c("language","native_speaker")
dat$native_speaker <- as.numeric(gsub("\\*","",as.character(dat$native_speaker)))
dat$language <- as.character(dat$language)
datplot <- dat[order(dat$native_speaker, decreasing = T)[1:15],]
head(dat)
datplot %>% ggvis(~language, ~native_speaker) %>% layer_bars()
datplot <- dat[order(dat$native_speaker, decreasing = T)[1:15],]
datplot$language <- factor(dat$language,levels= datplot$languagelanguage[order(dat$native_speaker)])
datplot$language <- with(dataplot, factor(language,levels= language[order(native_speaker)])
datplot$language <- with(dataplot, factor(language,levels= language[order(native_speaker)]))
datplot$language <- with(dataplot, factor(language,levels= language[order(native_speaker)]))
datplot <- dat[order(dat$native_speaker, decreasing = T)[1:15],]
datplot$language <- with(dataplot, factor(language,levels= language[order(native_speaker)]))
datplot$language <- with(datplot, factor(language,levels= language[order(native_speaker)]))
datplot <- dat[order(dat$native_speaker, decreasing = T)[1:15],]
datplot$language <- with(datplot, factor(language,levels= language[order(native_speaker)]))
head(dat)
datplot %>% ggvis(~language, ~native_speaker) %>% layer_bars()
datplot %>% ggvis(~language, ~native_speaker) %>%
layer_bars() %>%layer_bars(width = 10)
datplot %>% ggvis(~language, ~native_speaker) %>%
layer_bars() %>%layer_bars(width = 1)
datplot %>% ggvis(~language, ~native_speaker) %>%
layer_bars() %>%layer_bars(width = .11)
datplot %>% ggvis(~language, ~native_speaker) %>%
layer_bars() %>%layer_bars(width = .5)
datplot %>% ggvis(~language, ~native_speaker) %>%
layer_bars() %>%layer_bars(width = .8)
datplot %>% ggvis(~language, ~native_speaker) %>%
layer_bars()
? manip
head(dat)
ggplot(dat) +
geom_bar(aes(language, native_speaker))
library(ggplot2)
ggplot(dat) +
geom_bar(aes(language, native_speaker))
ggplot(datplot) +
geom_bar(aes(language, native_speaker))
datplot <- dat[order(dat$native_speaker, decreasing = F)[1:15],]
datplot$language <- with(datplot, factor(language,levels= language[order(native_speaker)]))
head(dat)
ggplot(datplot) +
geom_bar(aes(language, native_speaker))
datplot <- dat[order(dat$native_speaker, decreasing = T)[1:15],]
datplot$language <- with(datplot, factor(language,levels= language[order(native_speaker)]))
head(dat)
ggplot(datplot) +
geom_bar(aes(language, native_speaker))
ggplot(dat[order(dat$native_speaker, decreasing = T)[1:15],]) +
geom_point(aes(factor(language,levels= language[order(native_speaker)]),native_speaker), stat="identity") +
coord_flip() + theme_bw()+
ylab("Average Passing Distence (Yards)") +xlab("Player")
ggplot(dat[order(dat$native_speaker, decreasing = T)[1:15],]) +
geom_bar(aes(factor(language,levels= language[order(native_speaker)]),native_speaker), stat="identity") +
coord_flip() + theme_bw()+
ylab("Average Passing Distence (Yards)") +xlab("Player")
head(dat)
gsub("[^\x00-\x7F]+","","Hindi\nहिन्दी ")
gsub("'/[^[:alpha:][:punct:][:digit:]]/u'","","Hindi\nहिन्दी ")
gsub("\W","","Hindi\nहिन्दी ")
gsub("\W","","Hindi\nहिन्दी ")
gsub("\w","","Hindi\nहिन्दी ")
? gsub
gsub("\\W","","Hindi\nहिन्दी ")
dat$lan <- with(dat,gsub("\\W","","language"))
head(dat)
dat$lan <- with(dat,gsub("\\W","",language))
head(dat)
names(dat) <- c("language","native_speaker")
dat$speaker <- as.numeric(gsub("\\*","",as.character(dat$native_speaker)))
dat$lan <- with(dat,gsub("\\W","",language))
dat$speaker <- as.numeric(gsub("\\*","",as.character(dat$native_speaker)))
dat$lan <- with(dat,gsub("\\W","",language))
head(dat)
ggplot(dat[order(dat$speaker, decreasing = T)[1:15],]) +
geom_bar(aes(factor(lan,levels= lan[order(speaker)]),speaker), stat="identity") +
coord_flip() + theme_bw()+
ylab("Milion people") +xlab("Language")
View(dat)
? sub
?substr
dat$lan <- sub(with(dat,gsub("\\W","",language)),1,20)
dat$lan <- substr(with(dat,gsub("\\W","",language)),1,20)
head(dat)
ggplot(dat[order(dat$speaker, decreasing = T)[1:15],]) +
geom_bar(aes(factor(lan,levels= lan[order(speaker)]),speaker), stat="identity") +
coord_flip() + theme_bw()+
ylab("Milion people") +xlab("Language")
dat$lang <- substr(with(dat,gsub("\\W","",language)),1,20)
dat$lan <- with(dat, substr(lang,1,20))
ggplot(dat[order(dat$speaker, decreasing = T)[1:20],]) +
geom_bar(aes(factor(lan,levels= lan[order(speaker)]),speaker), stat="identity") +
coord_flip() + theme_bw()+
ylab("Milion people") +xlab("Language")
summary(cars)
plot(cars)
plot(cars)
plot(cars)
plot(cars)
plot(cars)
? <<-
? <-
? as.raster
as.raster(matrix(hcl(0, 80, seq(50, 80, 10)),
nrow = 4, ncol = 5))
as.raster(1:5, max = 5)
as.raster(1:10 %% 2 == 0)
23.25+.6+2.65+2.65
9.63+2.37
12+7.76+10.25+19.11+17.90+1.27+7.68
75.97+29.15+21.25+30
citation('knitr')
? pandoc
23*.17391
24*.1666
28*.1428
.1935*31
library(devtools)
install.packages("devtools")
library(devtools)
install_github(bookdown)
install_github("bookdown")
install.packages("rmarkdown")
install_github("rmarkdown")
install_github("bookdown")
library(bookdown)
cite(knitr)
cite("knitr")
cite("R")
citation("knitr")
citation("ggplot2")
citation("RStudio")
citation("knitr")
citation("xtable")
citation"R"
citation("R")
vesion
version()
Version()
R
clear
sessionInfo()
cite("R")
cite("R, boot-package", refs)
install.packages("tikzDevice")
citation("xtable")
install.packages("PASWR")
for (i in c("A","B", "C")){
if(i=="B") cat(i[1])
}
for (i in c("A","B", "C")){
if(i=="B") raw(B)
}
for (i in c("A","B", "C")){
if(i=="B") raw(i)
}
for (i in c("A","B", "C")){
if(i=="B") cat(i)
}
for (i in c("A","B", "C")){
if(i=="B") print(i)
}
? cat
for (i in c("A","B", "C")){
if(i > "B") print(i)
}
? while
;;
? repeat
kk
for (i in c("A","B", "C")){
next
if(i > "B") print(i)
}
for (i in c("A","B", "C")){
next
if(i > "B") print(i)
}
for (i in c("A","B", "C")){
if(i > "B") print(i)
}
if(4==5) print("A")
else print("B")
if(4==5) print("A") else
print("B")
? else
? if
else
repeat{}
repeat{if(i>5) break}
i
i>5
if(4==5) print("A")
else print("B")
x <- matrix(1:9, ncol=3)
x
dimnames(x)
dim(x)
p <- plot(1:20)
str(p)
p
t
s
s
s
p
p+lines(1:20)
plot(1:20+lines(1:20)
)
plot(1:20)+lines(1:20)
seq_len(12)
seq_len(x)
x <- c(4,8,0)
seq_len(x)
? seq_len
seq_along(x)
? load
? coplot
coplot(lat ~ long | depth, data = quakes)
given.depth <- co.intervals(quakes$depth, number = 4, overlap = .1)
coplot(lat ~ long | depth, data = quakes, given.v = given.depth, rows = 1)
Index <- seq(length = nrow(warpbreaks)) # to get nicer default labels
coplot(breaks ~ Index | wool * tension, data = warpbreaks,
show.given = 0:1)
coplot(breaks ~ Index | wool * tension, data = warpbreaks,
col = "red", bg = "pink", pch = 21,
bar.bg = c(fac = "light blue"))
? dotchart
? dotchart
? dotchart
dotchart(VADeaths, main = "Death Rates in Virginia - 1940")
demo(Japanese)
scan(n=2)
x <- scan(5)
x <- scan(n=5)
x
lapply(li, function(a,b)
mean(a[a>b]), val)
? lapply
? sapply
x <- 1:20
y <- sample(x)
x==y
apply(x,y,mean)
? apply
apply(x,1,mean)
apply(x,mean)
sapply(x,sample)
sapply(1:10,seq_along)
sapply(1:10, seq_along )
sapply(1:10, seq_len )
? rep
sapply(1:5, function(x)return(rep(x,times=x)))
dat <- read.table(url)
url <- "http://cdiac.ornl.gov/ftp/ushcn_daily/state27_NH.txt.gz"
dat <- read.table(url)
? quantile
x <- rpois()
x <- rpois(n=5, lambda=2)
x
sd(x)
mean(x)
pbeta(x)
ppois(x)
ppois(x, lembda=2)
ppois(x, lembda=2)
ppois(x, lambda=2)
? round
? inv
? inverse
? scale
dist
? dist
x
dist(x)
x <- rpois(n=5, lambda=2)
x
x <- matrix(1:12,nxcol=3)
x <- matrix(1:12,ncol=3)
x
dist(x)
head(mtcars)
? hclust
d <- dist(as.matrix(mtcars))
hc <- hclust(d)
groups <- cutree(fit, k=5) # cut tree into 5 clusters
groups <- cutree(hc, k=5) # cut tree into 5 clusters
rect.hclust(fit, k=5, border="red")
plot(hc)
rect.hclust(hc, k=5, border="red")
data()
head(nhtemp)
url <- "http://www.unt.edu/rss/class/Jon/R_SC/Module3/ExampleData3.txt"
dat <- read.table(url)
head(dat)
dat <- read.table(url, header=T)
head(dat)
? readline
url <- "mahbub.stat.iastate.edu/ecg_fractal/ecg_cvp.csv"
dat <- read.table(url, header=T)
dat <- read.csv(url, header=T, sep=",")
url <- "http://mahbub.stat.iastate.edu/ecg_fractal/ecg_cvp.csv"
dat <- read.csv(url, header=T, sep=",")
dim(dat)
a <- matrix(x, 4, 3)
b <- array(x, c(4, 3))
x <- 1:12
a <- matrix(x, 4, 3)
b <- array(x, c(4, 3))
? matrix
matrix(x)
matrix(x,4)
matrix(x,4,3)
a <- matrix(x,4,3)
b <- array(x, c(4, 3))
a
b
a==b
? na.action
x <-  c(3,6,9,NA,3)
sum(x)
sum(x, na.rm=T)
na.omit(x)
na.omit(x)
y <- na.omit(x)
y
str(y'')
str(y)
mean(y'')
mean(y)
sum(y)
install.packages("rjson")
library("rjson")
json_file <- "http://webonastick.com/uscl/feeds/uscl.json.txt"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
? readliones
? readlines
? readLines
readLine()
readLine
readLines()
? pnorm
? postscript
? jpeg
setwd("~/Box Sync/Teaching/stat4410-8416-Data-Science/04-dynamic-report")
Paste("Total rows of the dataframe mtcars is",  nrow(mtcars))
paste("Total rows of the dataframe mtcars is",  nrow(mtcars))
x <- head(mtcars)
x
install.packages("dplyr")
library(dplyr)
dsname <- "trees"
ds <- tbl_df(get(dsname))
ds
nobs <- nrow(ds)
obs <- sample(nobs, 5)
vars <- 2:7
ds <- ds[obs, vars]
nobs <- nrow(ds)
obs <- sample(nobs, 5)
ds <- ds[obs]
nobs
obs
? kable
setwd("~/Box Sync/Teaching/stat4410-8416-Data-Science/04-dynamic-report")
Sys.setenv(TEXINPUTS=getwd(),
BIBINPUTS=getwd(),
BSTINPUTS=getwd())
getwd()
library(ggmap)
library(mapproj)
map <- get_map(location = 'Europe', zoom = 4)
ggmap(map)
? get_map
map <- get_map(source = 'stamen', maptype = 'toner')
ggmap(map, fullpage = TRUE)
map('italy', fill = TRUE, col = 1:10)
map('USA', fill = TRUE, col = 1:10)
map('usa', fill = TRUE, col = 1:10)
map('bangladesh', fill = TRUE, col = 1:10)
state.list <- c("maryland","new jersey","west virginia", "virginia","ohio","delaware","pennsylvania","kentucky","indiana","north carlina")
map("state",state.list)
map.cities(x=world.cities, Country="US",minpop=100000)
library(mapdata)
install.packages("mapdata")
library(mapdata)
map.cities(x=world.cities, Country="US",minpop=100000)
library(maps)
map.cities(x=world.cities, Country="US",minpop=100000)
map.cities(minpop=100000)
state.list <- c("maryland","new jersey","west virginia", "virginia","ohio","delaware","pennsylvania","kentucky","indiana","north carolina")
map("state",state.list)
map.cities(minpop=100000)
map <- get_map(location = 'Omaha', zoom = 4)
ggmap(map)
map <- get_map(location = 'Omaha', zoom = 9)
ggmap(map)
map <- get_map(location = 'Omaha', zoom = 10)
ggmap(map)
map <- get_map(location = 'Omaha', zoom = 11)
ggmap(map)
? get_map
map <- get_map(location = 'Omaha', zoom = 11, source = 'stamen', maptype = 'watercolor')
map <- get_map(location = 'Omaha', zoom = 11, maptype = 'watercolor')
map <- get_map(location = 'Omaha', zoom = 11)
ggmap(map, fullpage = TRUE)
map <- get_map(source = 'stamen', maptype = 'watercolor')
map <- get_map(location = 'Omaha', zoom = 12)
ggmap(map, fullpage = TRUE)
map <- get_map(location = 'Omaha', zoom = 11)
ggmap(map)
? get_map
map <- get_map(location = 'Omaha', maptype = 'satellite', zoom = 11)
ggmap(map)
map <- get_map(location = 'Omaha', maptype = 'roadmap', zoom = 11)
ggmap(map)
map <- get_map(source = 'stamen', maptype = 'watercolor')
map <- get_map(source = 'cloudmade', maptype = 'watercolor')
map <- get_map(source = 'osm', maptype = 'watercolor')
ggmap(map, fullpage = TRUE)
geocode("the white house")
geocode("Dhaka")
map <- get_map(location = geocode("Dhaka"),  zoom = 11)
map <- get_map(location = 'Dhaka',  zoom = 11)
ggmap(map)
map <- get_map(location = 'Matlab',  zoom = 11)
ggmap(map)
map <- get_map(location = 'Matlab',  zoom = 15)
ggmap(map)
map <- get_map(location = 'Matlab',  zoom = 12)
ggmap(map)
map <- get_map(location = 'Bangladesh',  zoom = 12)
ggmap(map)
map <- get_map(location = 'Dhaka',  zoom = 11)
ggmap(map)
map <- get_map(source = 'stamen', maptype = 'watercolor')
ggmap(map, fullpage = TRUE)
ggmap(map)
geocode("Dhaka")
geocode("UNO")
geocode("University of Nebraska at Omaha")
baylor <- "baylor university"
qmap(baylor, zoom = 14)
uno <- "University of Nebraska at Omaha"
qmap(uno, zoom = 14)
qmap(uno, zoom = 16)
qmap(uno, zoom = 16,source = "osm")
qmap(uno, zoom = 16,source = 'stamen')
qmap(uno, zoom = 16,source = "stamen")
install.packages("ggmap")
install.packages("ggmap")
uno <- "University of Nebraska at Omaha"
library(ggmap)
qmap(uno, zoom = 16,source = "stamen")
version
? print
get_square <- function(x){
if(x>100)
return("Big number") else
return(x^2)
}
get_square(3)
get_square(6)
get_square(1:2)
sapply(1:2,get_square)
? kable
library(knitr)
? kable
? kable
library(knitr)
x <- head(mtcars)
kable(x,format = 'latex', caption='Few records of mtcars')
? plot
? kable
